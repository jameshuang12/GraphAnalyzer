from polygon import RESTClient
from datetime import date
import numpy as np

#add database of the symbols of the stock

def userInput():
    print('Thank you for using our program today.')

    name = _askTicker()
    #create helper function to figue out if Symbol is correct. if not, tell it to retry.
    # if spelling is correct but not case, return that incorrect casing and list out options
    #if theres no correct one, just tell user that that symbol was not found anywhere in the database


    today = date.today()
    print("Today's date is:", today)


    #make this into helper function
    print('Enter the date for the first data point')

    date1 = _askTimestamp()
    print(date1)


    #make valid date helper function, within 2 years and not in the future.
    delta = date1 - today

    if delta.days>730:
        print("date given is beyond two years of allotted data given by the api program. Please enter "
              "a valid date between today and two years ago.")
        #helper function call

    #do the same with date 2 in terms of functions

    print('Enter the date for the second data point')

    date2 = _askTimestamp()
    print(date2)

    #helper function to compare dates
    if date1>date2:
        print('first date cannot be later than second date. please write both dates again.')

    return name, date1, date2


def _askTimestamp():
    year = int(_validate_number('year'))
    month = int(_validate_number('month'))
    day = int(_validate_number('day'))

    fulldate = date(year, month, day)   

    return fulldate


def _validate_number(value):
    while True:
        userInput = (input(f"Enter the {value}: "))
        if userInput.isdigit():
            return userInput
        else:
            print(f"Inputted {value} is invalid.")


def _askTicker():
    while True:
        userInput = (input("Enter the stock ticker symbol: "))
        if userInput.isalpha() and userInput.isupper() and len(userInput) <= 5:
            return userInput
        else:
            print(f"Inputted stock ticker symbol is invalid.")



client = RESTClient("ub3XXNePvsNTCCHX3Wd3wNknwrm1pzbZ")

aggs = client.get_aggs(
   name,
    1,
    "day",
    date1,
    date2,
)

def main():
    for i in range(len(aggs)):
       print(aggs[i], "\n")


    print(aggs[0])
    print(aggs[days - 2])

#find a way to access data. it is listed by date and so find the data with the date as the index.ma

if __name__ == '__main__':
    main()
