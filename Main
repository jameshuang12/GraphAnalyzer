from polygon import RESTClient
from datetime import date
from dateutil import relativedelta

# add database of the symbols of the stock and put it into a data structure accessible to the program.
#connect data structure into the name helper function


def userInput():
    """
    will have 2 helper functions: the name and dates
    :return: three values: the name, date 1 and date 2
    """
    print('Thank you for using our program today. Please put in the symbol for the desired stock')

    #will need to make helpe function for symbol.
    # if spelling is correct but not case, return that incorrect casing and list out options
    # if theres no correct one, just tell user that that symbol was not found anywhere in the database

    name = input()

    today = date.today()
    print("Today's date is:", today)

    dates = _timeStamps(today)

    date1 = dates[0]
    date2 = dates[1]

    return name, date1, date2


def _timeStamps(today):
    """
    :param today's date
    :return: two valid dates within the 2 years and the first date is earlier than the second.
    This however doesn't include if the ipo was less than 2 yrs ago
    """

    print('Enter the date for the first data point')
    date1 = _askTimestamp(today)
    print(date1)

    print('Enter the date for the second data point')
    date2 = _askTimestamp(today)
    print(date2)


    while True:
        if date1 < date2:
            return date1, date2
        else:
            print('first date cannot be later than second date. please write both dates again.')
            print('Enter the date for the first data point')
            date1 = _askTimestamp(today)
            print(date1)

            print('Enter the date for the second data point')
            date2 = _askTimestamp(today)
            print(date2)
            continue


def _askTimestamp(today):
    """
    :param today: today's date
    :return: a valid time format within 2 years
    """
    year = int(_validate_number('year'))

    while year < today.year - 2:
        year = int(input('Year must be within two years of todays date. Please try again '))

    month = int(_validate_number('month'))
    day = int(_validate_number('day'))

    fulldate = date(year, month, day)

    delta = relativedelta.relativedelta(today, fulldate)

    while True:
        if delta.years < 2:

            return fulldate
        else:
            fulldate = str(input("date given is beyond two years of allotted data given by the api program. Please enter "
                      "a valid date between today and two years ago. "))
            continue


def _validate_number(value):
    """
    :param value: a value
    :return: a valid number
    """
    while True:
        userInput = (input(f"Enter the {value}: "))
        if userInput.isdigit():
            return userInput
        else:
            print(f"PLease enter a valid {value}.")
            continue


def main():
    result = userInput()

    client = RESTClient("ub3XXNePvsNTCCHX3Wd3wNknwrm1pzbZ")

    aggs = client.get_aggs(
        result[0],
        1,
        "day",
        result[1],
        result[2],
    )
    days = aggs.__len__()
    for i in range(len(aggs)):
        print(i, " ", aggs[i], "\n")

    print(aggs[0])
    print(aggs[days - 1])


# find a way to access data. it is listed by date and so find the data with the date as the index.ma

if __name__ == '__main__':
    main()
